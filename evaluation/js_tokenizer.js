/*
author: Ziwen Yuan

Tokenize A folder of JavaScript .js programs.
In this project, this script:
1) tokenize all the translation result generated by JavaScripthon,
                saved under evaluation/javascripthon_atom_test_result/
2) save the tokenization results in corresponding .txt s. 
   Thus further python script can access the tokens and perform other operations.

JavaScript tokenizer used in this file requires installation:
https://github.com/lydell/js-tokens
npm install js-tokens
*/

const fs = require('fs')
const jsTokens = require("js-tokens");

// tokenize javascripthon result
// const source_folder = 'javascripthon_atom_test_result/'
// const result_folder = 'javascripthon_atom_test_result/'
// const dataset = 'atom_test'
// const lang_in_file_name = 'py'
// const lang = 'js'

// tokenize the ground truth data.
const source_folder = '../parser/data/atom_test_data/js/'
const result_folder = '../parser/data/atom_test_data/js_tokenized/'
const dataset = 'atom_test'
const lang_in_file_name = 'js'
const lang = 'js'

var count = 1
var file_name = source_folder + lang_in_file_name+'_'+dataset+'_'+count+'.'+lang
var result_file_name = result_folder + lang_in_file_name+'_'+dataset+'_'+count+'_tokenized'+ '.txt'

while (true){
    try {
        const data = fs.readFileSync(file_name, 'utf8')
        const tokens = Array.from(jsTokens(data));
        if (tokens.length == 0){
            console.log('Finished. Stopped at empty file '+file_name)
            break
        }
        var file_tokens = []
        for (token of tokens){
            var token_string = token.value
            if (token.value == ""){
                token_string = 'EMPTY_STRING'
            }
            else if (token.value == ' '){
                token_string = 'Space'
            }
            else if (token.type == 'WhiteSpace'){
                token_string = token_string.replace(/\s{4}/g, 'TAB')
            }
            if (token_string == '\n' && file_tokens[file_tokens.length -1]==';'){
                file_tokens.pop()
            }
            file_tokens.push(token_string)
        }

        var tokens_str =  file_tokens.join(" ")
        try {
            fs.writeFileSync(result_file_name, tokens_str)
            console.log('File Wrote:'+result_file_name)
          } catch (err) {
            console.error(err)
          }

        count = count + 1
        file_name = source_folder + lang_in_file_name+'_'+dataset+'_'+count+'.'+lang
        result_file_name = result_folder + lang_in_file_name+'_'+dataset+'_'+count+'_tokenized'+ '.txt'
        if (! fs.existsSync(file_name)) {
            console.log('Finished. Stopped at non-exist file '+file_name)
            break
        }
      } catch (err) {
        console.error(err)
      }
}

console.log('FINISHED')