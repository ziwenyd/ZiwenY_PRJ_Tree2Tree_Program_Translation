(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable (identifier singleNumber)) = (singleExpression (anonymousFunction function ( (formalParameterList (formalParameterArg (assignable (identifier nums)))) ) (functionBody { (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable (identifier counts)) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier (let_ let)) (variableDeclaration (assignable (identifier output)) = (singleExpression (literal null)))) eos))) (sourceElement (statement (iterationStatement for ( (singleExpression (identifier num)) (identifier of) (expressionSequence (singleExpression (identifier nums))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (identifier num)) in (singleExpression (identifier counts)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifier counts)) [ (expressionSequence (singleExpression (identifier num))) ]) = (singleExpression (singleExpression (singleExpression (identifier counts)) [ (expressionSequence (singleExpression (identifier num))) ]) + (singleExpression (literal (numericLiteral 1)))))) eos))) })) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifier counts)) [ (expressionSequence (singleExpression (identifier num))) ]) = (singleExpression (literal (numericLiteral 1))))) eos))) }))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier (let_ let)) (variableDeclaration (assignable (identifier k)) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression (identifier k)) < (singleExpression (singleExpression (identifier nums)) . (identifierName (identifier length))))) ; (expressionSequence (singleExpression (singleExpression (identifier k)) ++)) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (identifier counts)) [ (expressionSequence (singleExpression (singleExpression (identifier nums)) [ (expressionSequence (singleExpression (identifier k))) ])) ]) === (singleExpression (literal (numericLiteral 1))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier output)) = (singleExpression (singleExpression (identifier nums)) [ (expressionSequence (singleExpression (identifier k))) ]))) (eos ;))) (statement (breakStatement break (eos ;)))) }))))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (identifier output))) (eos ;))))) }))))) (eos ;))))) <EOF>)