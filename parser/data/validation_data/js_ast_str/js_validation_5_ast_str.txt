(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable (identifier containsNearbyDuplicate)) = (singleExpression (anonymousFunction function ( (formalParameterList (formalParameterArg (assignable (identifier nums))) , (formalParameterArg (assignable (identifier k)))) ) (functionBody { (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier num_set)) = (singleExpression new (singleExpression (identifier Set)) (arguments ( ))))) eos))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier (let_ let)) (variableDeclaration (assignable (identifier i)) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression (identifier i)) < (singleExpression (singleExpression (identifier nums)) . (identifierName (identifier length))))) ; (expressionSequence (singleExpression (singleExpression (identifier i)) ++)) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (identifier num_set)) . (identifierName (identifier has))) (arguments ( (argument (singleExpression (singleExpression (identifier nums)) [ (expressionSequence (singleExpression (identifier i))) ])) )))) ) (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (literal true))) eos))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifier num_set)) . (identifierName (identifier add))) (arguments ( (argument (singleExpression (singleExpression (identifier nums)) [ (expressionSequence (singleExpression (identifier i))) ])) )))) eos)) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (identifier num_set)) . (identifierName (identifier size))) > (singleExpression (identifier k)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifier num_set)) . (identifierName (reservedWord (keyword delete)))) (arguments ( (argument (singleExpression (singleExpression (identifier nums)) [ (expressionSequence (singleExpression (singleExpression (identifier i)) - (singleExpression (identifier k)))) ])) )))) eos))) }))))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal false))) eos)))) }))))) (eos <EOF>))))) <EOF>)