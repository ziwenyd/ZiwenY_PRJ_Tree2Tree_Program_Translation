(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable (identifier convertToTitle)) = (singleExpression (anonymousFunction function ( (formalParameterList (formalParameterArg (assignable (identifier columnNumber)))) ) (functionBody { (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable (identifier array)) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal 'Z'))) , (arrayElement (singleExpression (literal 'A'))) , (arrayElement (singleExpression (literal 'B'))) , (arrayElement (singleExpression (literal 'C'))) , (arrayElement (singleExpression (literal 'D'))) , (arrayElement (singleExpression (literal 'E'))) , (arrayElement (singleExpression (literal 'F'))) , (arrayElement (singleExpression (literal 'G'))) , (arrayElement (singleExpression (literal 'H'))) , (arrayElement (singleExpression (literal 'I'))) , (arrayElement (singleExpression (literal 'J'))) , (arrayElement (singleExpression (literal 'K'))) , (arrayElement (singleExpression (literal 'L'))) , (arrayElement (singleExpression (literal 'M'))) , (arrayElement (singleExpression (literal 'N'))) , (arrayElement (singleExpression (literal 'O'))) , (arrayElement (singleExpression (literal 'P'))) , (arrayElement (singleExpression (literal 'Q'))) , (arrayElement (singleExpression (literal 'R'))) , (arrayElement (singleExpression (literal 'S'))) , (arrayElement (singleExpression (literal 'T'))) , (arrayElement (singleExpression (literal 'U'))) , (arrayElement (singleExpression (literal 'V'))) , (arrayElement (singleExpression (literal 'W'))) , (arrayElement (singleExpression (literal 'X'))) , (arrayElement (singleExpression (literal 'Y')))) ])))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier (let_ let)) (variableDeclaration (assignable (identifier result)) = (singleExpression (literal '')))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (identifier columnNumber)) <= (singleExpression (literal (numericLiteral 26))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier result)) = (singleExpression (singleExpression (identifier array)) [ (expressionSequence (singleExpression (singleExpression (identifier columnNumber)) % (singleExpression (literal (numericLiteral 26))))) ]))) (eos ;))) (statement (returnStatement return (expressionSequence (singleExpression (identifier result))) (eos ;)))) })) else (statement (block { (statementList (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression (identifier columnNumber)) > (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier (let_ let)) (variableDeclaration (assignable (identifier remainder)) = (singleExpression (singleExpression (identifier columnNumber)) % (singleExpression (literal (numericLiteral 26)))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier result)) = (singleExpression (singleExpression (singleExpression (identifier array)) [ (expressionSequence (singleExpression (identifier remainder))) ]) + (singleExpression (identifier result))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier columnNumber)) = (singleExpression (singleExpression (singleExpression (identifier Math)) . (identifierName (identifier floor))) (arguments ( (argument (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (identifier columnNumber)) - (singleExpression (literal (numericLiteral 1))))) )) / (singleExpression (literal (numericLiteral 26))))) ))))) (eos ;)))) }))))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (identifier result))) (eos ;))))) }))))) (eos ;))))) <EOF>)