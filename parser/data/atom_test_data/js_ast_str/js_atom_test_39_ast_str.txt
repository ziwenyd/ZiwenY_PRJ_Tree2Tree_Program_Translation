(program (sourceElements (sourceElement (statement (functionDeclaration function (identifier atomTest) ( ) (functionBody { (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier s)) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2)))) , (arrayElement (singleExpression (literal (numericLiteral 3)))) , (arrayElement (singleExpression (literal (numericLiteral 4)))) , (arrayElement (singleExpression (literal (numericLiteral 5))))) ])))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier a)) = (singleExpression (literal (numericLiteral 0))))) eos))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier (let_ let)) (variableDeclaration (assignable (identifier i)) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression (identifier i)) < (singleExpression (singleExpression (identifier s)) . (identifierName (identifier length))))) ; (expressionSequence (singleExpression (singleExpression (identifier i)) ++)) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (identifier s)) [ (expressionSequence (singleExpression (identifier i))) ]) < (singleExpression (singleExpression (identifier s)) [ (expressionSequence (singleExpression (singleExpression (identifier i)) + (singleExpression (literal (numericLiteral 1))))) ]))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier a)) = (singleExpression (singleExpression (identifier s)) [ (expressionSequence (singleExpression (identifier i))) ]))) eos))) })) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier a)) = (singleExpression - (singleExpression (literal (numericLiteral 1)))))) eos))) }))))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (identifier a))) eos)))) }))))) <EOF>)