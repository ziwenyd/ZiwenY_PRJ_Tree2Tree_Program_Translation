(single_input (compound_stmt (funcdef def atomTest (parameters ( )) : (suite        (stmt (simple_stmt (small_stmt (expr_stmt (testlist_star_expr (test (or_test (and_test (not_test (comparison (expr (xor_expr (and_expr (shift_expr (arith_expr (term (factor (power (atom_expr (atom x)))))))))))))))) = (testlist_star_expr (test (or_test (and_test (not_test (comparison (expr (xor_expr (and_expr (shift_expr (arith_expr (term (factor (power (atom_expr (atom 1))))))))))))))))))  )) (stmt (simple_stmt (small_stmt (expr_stmt (testlist_star_expr (test (or_test (and_test (not_test (comparison (expr (xor_expr (and_expr (shift_expr (arith_expr (term (factor (power (atom_expr (atom y)))))))))))))))) = (testlist_star_expr (test (or_test (and_test (not_test (comparison (expr (xor_expr (and_expr (shift_expr (arith_expr (term (factor (power (atom_expr (atom 2))))))))))))))))))  )) (stmt (simple_stmt (small_stmt (expr_stmt (testlist_star_expr (test (or_test (and_test (not_test (comparison (expr (xor_expr (and_expr (shift_expr (arith_expr (term (factor (power (atom_expr (atom z)))))))))))))))) = (testlist_star_expr (test (or_test (and_test (not_test (comparison (expr (xor_expr (and_expr (shift_expr (arith_expr (term (factor (power (atom_expr (atom 3))))))))))))))))))  )) (stmt (compound_stmt (if_stmt if (test (or_test (and_test (not_test (comparison (expr (xor_expr (and_expr (shift_expr (arith_expr (term (factor (power (atom_expr (atom x)))))))))) (comp_op ==) (expr (xor_expr (and_expr (shift_expr (arith_expr (term (factor (power (atom_expr (atom y))))))))))))))) : (suite            (stmt (simple_stmt (small_stmt (flow_stmt (return_stmt return (testlist (test (or_test (and_test (not_test (comparison (expr (xor_expr (and_expr (shift_expr (arith_expr (term (factor (power (atom_expr (atom x)))))))))))))))))))  ))  ) elif (test (or_test (and_test (not_test (comparison (expr (xor_expr (and_expr (shift_expr (arith_expr (term (factor (power (atom_expr (atom x)))))))))) (comp_op >) (expr (xor_expr (and_expr (shift_expr (arith_expr (term (factor (power (atom_expr (atom y))))))))))))))) : (suite            (stmt (simple_stmt (small_stmt (flow_stmt (return_stmt return (testlist (test (or_test (and_test (not_test (comparison (expr (xor_expr (and_expr (shift_expr (arith_expr (term (factor (power (atom_expr (atom y)))))))))))))))))))  ))  ) elif (test (or_test (and_test (not_test (comparison (expr (xor_expr (and_expr (shift_expr (arith_expr (term (factor (power (atom_expr (atom x)))))))))) (comp_op >) (expr (xor_expr (and_expr (shift_expr (arith_expr (term (factor (power (atom_expr (atom z))))))))))))))) : (suite            (stmt (simple_stmt (small_stmt (flow_stmt (return_stmt return (testlist (test (or_test (and_test (not_test (comparison (expr (xor_expr (and_expr (shift_expr (arith_expr (term (factor (power (atom_expr (atom z)))))))))))))))))))  ))  ) else : (suite            (stmt (simple_stmt (small_stmt (pass_stmt pass))  ))  )))) (stmt (simple_stmt (small_stmt (flow_stmt (return_stmt return (testlist (test (or_test (and_test (not_test (comparison (expr (xor_expr (and_expr (shift_expr (arith_expr (term (factor - (factor (power (atom_expr (atom 1)))))))))))))))))))) \n)) \n))) \n)