(program (sourceElements (sourceElement (statement (functionDeclaration function (identifier lengthOfLastWord) ( (formalParameterList (formalParameterArg (assignable (identifier s)))) ) (functionBody { (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier (let_ let)) (variableDeclaration (assignable (identifier index)) = (singleExpression (singleExpression (singleExpression (identifier s)) . (identifierName (identifier length))) - (singleExpression (literal (numericLiteral 1)))))) eos))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression (singleExpression (identifier index)) >= (singleExpression (literal (numericLiteral 0)))) && (singleExpression (singleExpression (singleExpression (identifier s)) [ (expressionSequence (singleExpression (identifier index))) ]) === (singleExpression (literal ' '))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier index)) (assignmentOperator -=) (singleExpression (literal (numericLiteral 1))))) eos))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier (let_ let)) (variableDeclaration (assignable (identifier result)) = (singleExpression (literal (numericLiteral 0))))) eos))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression (singleExpression (identifier index)) >= (singleExpression (literal (numericLiteral 0)))) && (singleExpression (singleExpression (singleExpression (identifier s)) [ (expressionSequence (singleExpression (identifier index))) ]) !== (singleExpression (literal ' '))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier index)) (assignmentOperator -=) (singleExpression (literal (numericLiteral 1))))) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier result)) (assignmentOperator +=) (singleExpression (literal (numericLiteral 1))))) eos))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (identifier result))) eos)))) })))) (sourceElement (statement (emptyStatement_ ;)))) <EOF>)