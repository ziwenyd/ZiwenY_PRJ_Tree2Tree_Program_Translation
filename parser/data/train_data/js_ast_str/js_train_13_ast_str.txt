(program (sourceElements (sourceElement (statement (functionDeclaration function (identifier mySqrt) ( (formalParameterList (formalParameterArg (assignable (identifier x)))) ) (functionBody { (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier (let_ let)) (variableDeclaration (assignable (identifier leftPointer)) = (singleExpression (literal (numericLiteral 1))))) eos))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier (let_ let)) (variableDeclaration (assignable (identifier rightPointer)) = (singleExpression (singleExpression (identifier leftPointer)) * (singleExpression (literal (numericLiteral 2)))))) eos))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression (singleExpression (identifier rightPointer)) * (singleExpression (identifier rightPointer))) <= (singleExpression (identifier x)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier leftPointer)) = (singleExpression (identifier rightPointer)))) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier rightPointer)) = (singleExpression (singleExpression (identifier leftPointer)) * (singleExpression (literal (numericLiteral 2)))))) eos))) }))))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression (identifier leftPointer)) < (singleExpression (identifier rightPointer)))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable (identifier mid)) = (singleExpression (singleExpression (identifier leftPointer)) + (singleExpression (singleExpression (singleExpression (identifier Math)) . (identifierName (identifier floor))) (arguments ( (argument (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (identifier rightPointer)) - (singleExpression (identifier leftPointer)))) )) / (singleExpression (literal (numericLiteral 2))))) )))))) eos)) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (identifier mid)) * (singleExpression (identifier mid))) === (singleExpression (identifier x)))) ) (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (identifier mid))) (eos ;)))) })) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (identifier mid)) * (singleExpression (identifier mid))) < (singleExpression (identifier x)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier leftPointer)) = (singleExpression (singleExpression (identifier mid)) + (singleExpression (literal (numericLiteral 1)))))) eos))) })) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier rightPointer)) = (singleExpression (identifier mid)))) eos))) }))))))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (identifier leftPointer)) - (singleExpression (literal (numericLiteral 1))))) eos)))) })))) (sourceElement (statement (emptyStatement_ ;)))) <EOF>)