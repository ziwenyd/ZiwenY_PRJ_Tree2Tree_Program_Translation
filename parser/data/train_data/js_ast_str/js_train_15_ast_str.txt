(program (sourceElements (sourceElement (statement (functionDeclaration function (identifier merge) ( (formalParameterList (formalParameterArg (assignable (identifier nums1))) , (formalParameterArg (assignable (identifier m))) , (formalParameterArg (assignable (identifier nums2))) , (formalParameterArg (assignable (identifier n)))) ) (functionBody { (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier (let_ let)) (variableDeclaration (assignable (identifier nums1_ptr)) = (singleExpression (singleExpression (identifier m)) - (singleExpression (literal (numericLiteral 1)))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier (let_ let)) (variableDeclaration (assignable (identifier nums2_ptr)) = (singleExpression (singleExpression (identifier n)) - (singleExpression (literal (numericLiteral 1)))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier (let_ let)) (variableDeclaration (assignable (identifier insert_ptr)) = (singleExpression (singleExpression (singleExpression (identifier m)) + (singleExpression (identifier n))) - (singleExpression (literal (numericLiteral 1)))))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression (singleExpression (identifier nums1_ptr)) >= (singleExpression (literal (numericLiteral 0)))) && (singleExpression (singleExpression (identifier nums2_ptr)) >= (singleExpression (literal (numericLiteral 0)))))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (identifier nums1)) [ (expressionSequence (singleExpression (identifier nums1_ptr))) ]) > (singleExpression (singleExpression (identifier nums2)) [ (expressionSequence (singleExpression (identifier nums2_ptr))) ]))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifier nums1)) [ (expressionSequence (singleExpression (identifier insert_ptr))) ]) = (singleExpression (singleExpression (identifier nums1)) [ (expressionSequence (singleExpression (identifier nums1_ptr))) ]))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier insert_ptr)) --)) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier nums1_ptr)) --)) (eos ;)))) })) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifier nums1)) [ (expressionSequence (singleExpression (identifier insert_ptr))) ]) = (singleExpression (singleExpression (identifier nums2)) [ (expressionSequence (singleExpression (identifier nums2_ptr))) ]))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier insert_ptr)) --)) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier nums2_ptr)) --)) (eos ;)))) }))))) }))))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression (identifier nums2_ptr)) >= (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifier nums1)) [ (expressionSequence (singleExpression (identifier insert_ptr))) ]) = (singleExpression (singleExpression (identifier nums2)) [ (expressionSequence (singleExpression (identifier nums2_ptr))) ]))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier insert_ptr)) --)) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier nums2_ptr)) --)) (eos ;)))) })))))) })))) (sourceElement (statement (emptyStatement_ ;)))) <EOF>)