(program (sourceElements (sourceElement (statement (functionDeclaration function (identifier strStr) ( (formalParameterList (formalParameterArg (assignable (identifier haystack))) , (formalParameterArg (assignable (identifier needle)))) ) (functionBody { (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier hlen)) = (singleExpression (singleExpression (identifier haystack)) . (identifierName (identifier length))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier nlen)) = (singleExpression (singleExpression (identifier needle)) . (identifierName (identifier length))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (identifier hlen)) === (singleExpression (literal (numericLiteral 0)))) && (singleExpression (singleExpression (identifier nlen)) === (singleExpression (literal (numericLiteral 0)))))) ) (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 0)))) eos))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (identifier hlen)) === (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression - (singleExpression (literal (numericLiteral 1))))) eos))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier diff)) = (singleExpression (singleExpression (singleExpression (identifier hlen)) - (singleExpression (identifier nlen))) + (singleExpression (literal (numericLiteral 1)))))) eos))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable (identifier i)) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression (identifier i)) < (singleExpression (identifier hlen)))) ; (expressionSequence (singleExpression (singleExpression (identifier i)) ++)) ) (statement (block { (statementList (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable (identifier j)) = (singleExpression (identifier i)))) ; (expressionSequence (singleExpression (singleExpression (identifier j)) < (singleExpression (identifier diff)))) ; (expressionSequence (singleExpression (singleExpression (identifier j)) ++)) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (identifier haystack)) . (identifierName (identifier substring))) (arguments ( (argument (singleExpression (identifier j))) , (argument (singleExpression (singleExpression (identifier j)) + (singleExpression (identifier nlen)))) ))) === (singleExpression (identifier needle)))) ) (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (identifier j))) eos))) }))))) })))) (statement (returnStatement return (expressionSequence (singleExpression - (singleExpression (literal (numericLiteral 1))))) eos))) })))))) })))) (sourceElement (statement (emptyStatement_ ;)))) <EOF>)