(program (sourceElements (sourceElement (statement (functionDeclaration function (identifier longestCommonPrefix) ( (formalParameterList (formalParameterArg (assignable (identifier strs)))) ) (functionBody { (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifier strs)) . (identifierName (identifier sort))) (arguments ( )))) eos))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier (let_ let)) (variableDeclaration (assignable (identifier i)) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression (identifier i)) < (singleExpression (singleExpression (singleExpression (identifier strs)) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) . (identifierName (identifier length))))) ; (expressionSequence (singleExpression (singleExpression (identifier i)) ++)) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (identifier strs)) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) [ (expressionSequence (singleExpression (identifier i))) ]) !== (singleExpression (singleExpression (singleExpression (identifier strs)) [ (expressionSequence (singleExpression (singleExpression (singleExpression (identifier strs)) . (identifierName (identifier length))) - (singleExpression (literal (numericLiteral 1))))) ]) [ (expressionSequence (singleExpression (identifier i))) ]))) ) (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (identifier strs)) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) . (identifierName (identifier substr))) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (identifier i))) )))) eos))) }))))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (identifier strs)) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) eos)))) })))) (sourceElement (statement (emptyStatement_ ;)))) <EOF>)