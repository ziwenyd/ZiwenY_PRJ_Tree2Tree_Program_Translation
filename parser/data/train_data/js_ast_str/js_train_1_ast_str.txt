(program (sourceElements (sourceElement (statement (functionDeclaration function (identifier twoSum) ( (formalParameterList (formalParameterArg (assignable (identifier nums))) , (formalParameterArg (assignable (identifier target)))) ) (functionBody { (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable (identifier map)) = (singleExpression new (singleExpression (identifier Map)) (arguments ( ))))) eos))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier (let_ let)) (variableDeclaration (assignable (identifier i)) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression (identifier i)) < (singleExpression (singleExpression (identifier nums)) . (identifierName (identifier length))))) ; (expressionSequence (singleExpression (singleExpression (identifier i)) ++)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable (identifier complementary)) = (singleExpression (singleExpression (identifier target)) - (singleExpression (singleExpression (identifier nums)) [ (expressionSequence (singleExpression (identifier i))) ])))) eos)) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (identifier map)) . (identifierName (identifier has))) (arguments ( (argument (singleExpression (identifier complementary))) )))) ) (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (identifier i))) , (arrayElement (singleExpression (singleExpression (singleExpression (identifier map)) . (identifierName (identifier get))) (arguments ( (argument (singleExpression (identifier complementary))) ))))) ]))) eos))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifier map)) . (identifierName (identifier set))) (arguments ( (argument (singleExpression (singleExpression (identifier nums)) [ (expressionSequence (singleExpression (identifier i))) ])) , (argument (singleExpression (identifier i))) )))) eos))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression - (singleExpression (literal (numericLiteral 1))))) , (arrayElement (singleExpression - (singleExpression (literal (numericLiteral 1)))))) ]))) eos)))) })))) (sourceElement (statement (emptyStatement_ ;)))) <EOF>)