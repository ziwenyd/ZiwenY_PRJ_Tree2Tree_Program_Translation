(program (sourceElements (sourceElement (statement (functionDeclaration function (identifier isAnagram) ( (formalParameterList (formalParameterArg (assignable (identifier s))) , (formalParameterArg (assignable (identifier t)))) ) (functionBody { (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (identifier s)) . (identifierName (identifier length))) !== (singleExpression (singleExpression (identifier t)) . (identifierName (identifier length))))) ) (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (literal false))) eos))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable (identifier map)) = (singleExpression new (singleExpression (identifier Map)) (arguments ( ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier (let_ let)) (variableDeclaration (assignable (identifier count)))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier (let_ let)) (variableDeclaration (assignable (identifier ch)))) (identifier of) (expressionSequence (singleExpression (identifier s))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (identifier map)) . (identifierName (identifier has))) (arguments ( (argument (singleExpression (identifier ch))) )))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier count)) = (singleExpression (singleExpression (singleExpression (identifier map)) . (identifierName (identifier get))) (arguments ( (argument (singleExpression (identifier ch))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier count)) ++)) eos))) })) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier count)) = (singleExpression (literal (numericLiteral 1))))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifier map)) . (identifierName (identifier set))) (arguments ( (argument (singleExpression (identifier ch))) , (argument (singleExpression (identifier count))) )))) (eos ;)))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier (let_ let)) (variableDeclaration (assignable (identifier j)))) (identifier of) (expressionSequence (singleExpression (identifier t))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (identifier map)) . (identifierName (identifier has))) (arguments ( (argument (singleExpression (identifier j))) ))) && (singleExpression (singleExpression (singleExpression (identifier map)) . (identifierName (identifier get))) (arguments ( (argument (singleExpression (identifier j))) ))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier count)) = (singleExpression (singleExpression (singleExpression (identifier map)) . (identifierName (identifier get))) (arguments ( (argument (singleExpression (identifier j))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifier map)) . (identifierName (identifier set))) (arguments ( (argument (singleExpression (identifier j))) , (argument (singleExpression (singleExpression (identifier count)) - (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))) })) else (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))) }))))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal true))) (eos ;))))) })))) (sourceElement (statement (emptyStatement_ ;)))) <EOF>)