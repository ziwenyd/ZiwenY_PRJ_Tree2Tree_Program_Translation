(program (sourceElements (sourceElement (statement (functionDeclaration function (identifier isValid) ( (formalParameterList (formalParameterArg (assignable (identifier s)))) ) (functionBody { (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier openB)) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "("))) , (arrayElement (singleExpression (literal "["))) , (arrayElement (singleExpression (literal "{")))) ])))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier closeB)) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal ")"))) , (arrayElement (singleExpression (literal "]"))) , (arrayElement (singleExpression (literal "}")))) ])))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier stack)) = (singleExpression (arrayLiteral [ elementList ])))) eos))) (sourceElement (statement (iterationStatement for ( (singleExpression (identifier c)) (identifier of) (expressionSequence (singleExpression (identifier s))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (identifier openB)) . (identifierName (identifier includes))) (arguments ( (argument (singleExpression (identifier c))) )))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifier stack)) . (identifierName (identifier push))) (arguments ( (argument (singleExpression (singleExpression (singleExpression (identifier openB)) . (identifierName (identifier indexOf))) (arguments ( (argument (singleExpression (identifier c))) )))) )))) eos))) })) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (identifier stack)) . (identifierName (identifier length))) === (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (literal false))) eos))) })) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (identifier closeB)) . (identifierName (identifier indexOf))) (arguments ( (argument (singleExpression (identifier c))) ))) != (singleExpression (singleExpression (singleExpression (identifier stack)) . (identifierName (identifier pop))) (arguments ( ))))) ) (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (literal false))) eos))) })) else (statement (block { }))))))))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (identifier stack)) . (identifierName (identifier length))) === (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal true))) eos))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal false))) eos)))) })))) (sourceElement (statement (emptyStatement_ ;)))) <EOF>)