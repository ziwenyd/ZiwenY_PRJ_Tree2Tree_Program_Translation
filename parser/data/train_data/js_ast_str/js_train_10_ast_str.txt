(program (sourceElements (sourceElement (statement (functionDeclaration function (identifier maxSubArray) ( (formalParameterList (formalParameterArg (assignable (identifier nums)))) ) (functionBody { (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier (let_ let)) (variableDeclaration (assignable (identifier result)) = (singleExpression - (singleExpression (identifier Infinity))))) eos))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier (let_ let)) (variableDeclaration (assignable (identifier sum)) = (singleExpression (literal (numericLiteral 0))))) eos))) (sourceElement (statement (iterationStatement for ( (singleExpression (identifier num)) (identifier of) (expressionSequence (singleExpression (identifier nums))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier sum)) (assignmentOperator +=) (singleExpression (identifier num)))) eos)) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (identifier sum)) > (singleExpression (identifier result)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier result)) = (singleExpression (identifier sum)))) eos))) })))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (identifier sum)) < (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier sum)) = (singleExpression (literal (numericLiteral 0))))) eos))) }))))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (identifier result))) eos)))) })))) (sourceElement (statement (emptyStatement_ ;)))) <EOF>)