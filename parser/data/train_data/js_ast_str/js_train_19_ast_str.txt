(program (sourceElements (sourceElement (statement (functionDeclaration function (identifier moveZeroes) ( (formalParameterList (formalParameterArg (assignable (identifier nums)))) ) (functionBody { (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier (let_ let)) (variableDeclaration (assignable (identifier index)) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier (let_ let)) (variableDeclaration (assignable (identifier i)) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression (identifier i)) < (singleExpression (singleExpression (identifier nums)) . (identifierName (identifier length))))) ; (expressionSequence (singleExpression (singleExpression (identifier i)) ++)) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (identifier nums)) [ (expressionSequence (singleExpression (identifier i))) ]) != (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifier nums)) [ (expressionSequence (singleExpression (identifier index))) ]) = (singleExpression (singleExpression (identifier nums)) [ (expressionSequence (singleExpression (identifier i))) ]))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier index)) ++)) (eos ;)))) }))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier (let_ let)) (variableDeclaration (assignable (identifier i)) = (singleExpression (identifier index)))) ; (expressionSequence (singleExpression (singleExpression (identifier i)) < (singleExpression (singleExpression (identifier nums)) . (identifierName (identifier length))))) ; (expressionSequence (singleExpression (singleExpression (identifier i)) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifier nums)) [ (expressionSequence (singleExpression (identifier i))) ]) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) })))))) })))) (sourceElement (statement (emptyStatement_ ;)))) <EOF>)