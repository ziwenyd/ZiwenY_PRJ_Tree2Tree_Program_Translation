(program (sourceElements (sourceElement (statement (functionDeclaration function (identifier isPalindrome) ( (formalParameterList (formalParameterArg (assignable (identifier x)))) ) (functionBody { (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier (let_ let)) (variableDeclaration (assignable (identifier temp)) = (singleExpression (identifier x)))) eos))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier (let_ let)) (variableDeclaration (assignable (identifier reversedNum)) = (singleExpression (literal (numericLiteral 0))))) eos))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression (identifier temp)) >= (singleExpression (literal (numericLiteral 1))))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier (let_ let)) (variableDeclaration (assignable (identifier digit)) = (singleExpression (singleExpression (singleExpression (identifier Math)) . (identifierName (identifier floor))) (arguments ( (argument (singleExpression (singleExpression (identifier temp)) % (singleExpression (literal (numericLiteral 10))))) ))))) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier reversedNum)) = (singleExpression (singleExpression (singleExpression (identifier Math)) . (identifierName (identifier floor))) (arguments ( (argument (singleExpression (singleExpression (singleExpression (identifier reversedNum)) * (singleExpression (literal (numericLiteral 10)))) + (singleExpression (identifier digit)))) ))))) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier temp)) = (singleExpression (singleExpression (singleExpression (identifier Math)) . (identifierName (identifier floor))) (arguments ( (argument (singleExpression (singleExpression (identifier temp)) / (singleExpression (literal (numericLiteral 10))))) ))))) eos))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (identifier x)) === (singleExpression (identifier reversedNum)))) ) (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (literal true))) eos))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal false))) eos)))) }))))) <EOF>)