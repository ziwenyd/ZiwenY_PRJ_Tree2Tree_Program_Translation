(program (sourceElements (sourceElement (statement (functionDeclaration function (identifier isHappy) ( (formalParameterList (formalParameterArg (assignable (identifier num)))) ) (functionBody { (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (identifier num)) == (singleExpression (literal (numericLiteral 1))))) ) (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (literal true))) (eos ;)))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier (let_ let)) (variableDeclaration (assignable (identifier hash)) = (singleExpression new (singleExpression (identifier Set)) (arguments ( ))))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression (identifier num)) != (singleExpression (literal (numericLiteral 1))))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier (let_ let)) (variableDeclaration (assignable (identifier current)) = (singleExpression (identifier num)))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier (let_ let)) (variableDeclaration (assignable (identifier sum)) = (singleExpression (literal (numericLiteral 0))))) (eos ;))) (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression (identifier current)) != (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier sum)) (assignmentOperator +=) (singleExpression (singleExpression (singleExpression (identifier Math)) . (identifierName (identifier floor))) (arguments ( (argument (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (identifier current)) % (singleExpression (literal (numericLiteral 10))))) )) * (singleExpression ( (expressionSequence (singleExpression (singleExpression (identifier current)) % (singleExpression (literal (numericLiteral 10))))) )))) ))))) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier current)) = (singleExpression (singleExpression (singleExpression (identifier Math)) . (identifierName (identifier floor))) (arguments ( (argument (singleExpression (singleExpression (identifier current)) / (singleExpression (literal (numericLiteral 10))))) ))))) (eos ;)))) })))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (identifier hash)) . (identifierName (identifier has))) (arguments ( (argument (singleExpression (identifier sum))) )))) ) (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (identifier hash)) . (identifierName (identifier add))) (arguments ( (argument (singleExpression (identifier sum))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier num)) = (singleExpression (identifier sum)))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal true))) (eos ;))))) })))) (sourceElement (statement (emptyStatement_ ;)))) <EOF>)