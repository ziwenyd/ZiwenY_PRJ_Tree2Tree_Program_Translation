(program (sourceElements (sourceElement (statement (functionDeclaration function (identifier romanToInt) ( (formalParameterList (formalParameterArg (assignable (identifier s)))) ) (functionBody { (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier symbols)) = (singleExpression (objectLiteral { (propertyAssignment (propertyName "I") : (singleExpression (literal (numericLiteral 1)))) , (propertyAssignment (propertyName "V") : (singleExpression (literal (numericLiteral 5)))) , (propertyAssignment (propertyName "X") : (singleExpression (literal (numericLiteral 10)))) , (propertyAssignment (propertyName "L") : (singleExpression (literal (numericLiteral 50)))) , (propertyAssignment (propertyName "C") : (singleExpression (literal (numericLiteral 100)))) , (propertyAssignment (propertyName "D") : (singleExpression (literal (numericLiteral 500)))) , (propertyAssignment (propertyName "M") : (singleExpression (literal (numericLiteral 1000)))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier value)) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier (let_ let)) (variableDeclaration (assignable (identifier i)) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression (identifier i)) < (singleExpression (singleExpression (identifier s)) . (identifierName (identifier length))))) ; (expressionSequence (singleExpression (singleExpression (identifier i)) (assignmentOperator +=) (singleExpression (literal (numericLiteral 1))))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (identifier symbols)) [ (expressionSequence (singleExpression (singleExpression (identifier s)) [ (expressionSequence (singleExpression (identifier i))) ])) ]) < (singleExpression (singleExpression (identifier symbols)) [ (expressionSequence (singleExpression (singleExpression (identifier s)) [ (expressionSequence (singleExpression (singleExpression (identifier i)) + (singleExpression (literal (numericLiteral 1))))) ])) ]))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier value)) (assignmentOperator -=) (singleExpression (singleExpression (identifier symbols)) [ (expressionSequence (singleExpression (singleExpression (identifier s)) [ (expressionSequence (singleExpression (identifier i))) ])) ]))) eos))) })) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (identifier value)) (assignmentOperator +=) (singleExpression (singleExpression (identifier symbols)) [ (expressionSequence (singleExpression (singleExpression (identifier s)) [ (expressionSequence (singleExpression (identifier i))) ])) ]))) eos))) }))))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (identifier value))) eos)))) })))) (sourceElement (statement (emptyStatement_ ;)))) <EOF>)